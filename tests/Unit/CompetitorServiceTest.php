<?php

namespace Tests\Unit;

use App\Models\CompetitionDay;
use App\Models\Competitor;
use App\Models\CompetitorExportColumn;
use App\Models\PracticeDay;
use App\Models\Sport;
use App\Models\User;
use App\Services\CompetitorService;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CompetitorServiceTest extends TestCase {
	use RefreshDatabase;

	private $sport;
	private $competitionDays;
	private $practiceDays;
	private $competitors;
	private $exportColumns;
	private $competitorService;

	protected function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->sport = factory(Sport::class)->create();
		$this->competitors = factory(User::class,4)->make()->each(function ($competitor){
			factory(Competitor::class)->create()->user()->save($competitor);
		});
		$this->practiceDays = factory(PracticeDay::class,4)->create([
			'sport_id' => $this->sport->id
		]);
		$this->competitionDays = factory(CompetitionDay::class,4)->create([
			'sport_id' => $this->sport->id
		]);
		$this->competitors->each(function ($competitor){
			$competitor->user->sports()->save($this->sport, ['data' => []]);
			$competitor->user->competitionDays()->attach($this->competitionDays->shuffle()->slice(0,1));
			$competitor->user->practiceDays()->attach($this->practiceDays->shuffle()->slice(0,1));
		});
		$i = 0;
		$this->exportColumns = factory(CompetitorExportColumn::class,2)->make()->each(function ($exportColumn) use (&$i){
			$exportColumn->order = $i;
			if ($i % 2 == 0){
				$exportColumn->column = 'user.name';
			} else {
				$exportColumn->column = 'user.last_name';
			}
			$exportColumn->save();
			$i = $i + 1;
		});
		$this->competitorService = new CompetitorService;
	}

	public function test_sets_headings() {
		$headings = $this->competitorService->headings();
		$headers = CompetitorExportColumn::orderBy('order')->get()->pluck('name');
		$headers->push(__('sports.sport'));
		$headers->push(__('practiceDays.practiceDays'));
		$headers->push(__('sports.competitionDates'));
		$this->assertEquals($headers->toArray(),$headings);
	}

	public function test_get_collection() {
		$collection = $this->competitorService->collection();
		$data = collect();
		$fields = CompetitorExportColumn::orderBy('order')->get()->pluck('column');
		foreach ($this->sport->competitors as $competitor){
			$data->push($this->listSportData($fields,$competitor,$this->sport));
		}
		$this->assertEquals($data,$collection);
	}

	protected function listSportData($fields, Competitor $competitor, Sport $sport) {
		$result = collect();
		foreach ($fields as $field) {
			$model = strtok($field, '.');
			$column = strtok('.');
			if ($model === 'user') {
				$result->push($competitor->user->$column);
			} else {
				$result->push($competitor->data[$column] ?? '');
			}
		}
		$result->push($sport->name);
		$result->push($competitor->getSportsPracticeDays($competitor->pivot->sport_id));
		$result->push($competitor->getSportCompetitionDays($competitor->pivot->sport_id));
		return $result;
	}
}
